// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account.sql

package infra

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    tenant_id, status
) VALUES (
    $1, $2
) RETURNING id, tenant_id, status, created_at, updated_at, deleted_at
`

type CreateAccountParams struct {
	TenantID int32  `json:"tenant_id"`
	Status   string `json:"status"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.TenantID, arg.Status)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, tenant_id, status, created_at, updated_at, deleted_at FROM accounts 
WHERE tenant_id = $1 AND id = $2
LIMIT 1
`

type GetAccountParams struct {
	TenantID int32 `json:"tenant_id"`
	ID       int32 `json:"id"`
}

func (q *Queries) GetAccount(ctx context.Context, arg GetAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, arg.TenantID, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAccounts = `-- name: GetAccounts :many
SELECT id, tenant_id, status, created_at, updated_at, deleted_at FROM accounts 
WHERE tenant_id = $1
`

func (q *Queries) GetAccounts(ctx context.Context, tenantID int32) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccounts, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts 
SET status = $2, 
updated_at = $3, 
deleted_at = $4 
WHERE id = $1
RETURNING id, tenant_id, status, created_at, updated_at, deleted_at
`

type UpdateAccountParams struct {
	ID        int32        `json:"id"`
	Status    string       `json:"status"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	DeletedAt sql.NullTime `json:"deleted_at"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.ID,
		arg.Status,
		arg.UpdatedAt,
		arg.DeletedAt,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
