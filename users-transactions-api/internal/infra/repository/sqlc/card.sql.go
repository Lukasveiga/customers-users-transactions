// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: card.sql

package infra

import (
	"context"
	"database/sql"
)

const addAmount = `-- name: AddAmount :one
UPDATE cards 
SET amount = amount + $2,
updated_at = $3
WHERE id = $1 RETURNING id, account_id, amount, created_at, updated_at, deleted_at
`

type AddAmountParams struct {
	ID        int32        `json:"id"`
	Amount    int64        `json:"amount"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) AddAmount(ctx context.Context, arg AddAmountParams) (Card, error) {
	row := q.db.QueryRowContext(ctx, addAmount, arg.ID, arg.Amount, arg.UpdatedAt)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createCard = `-- name: CreateCard :one
INSERT INTO cards (
    account_id
) VALUES (
    $1
) RETURNING id, account_id, amount, created_at, updated_at, deleted_at
`

func (q *Queries) CreateCard(ctx context.Context, accountID int32) (Card, error) {
	row := q.db.QueryRowContext(ctx, createCard, accountID)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCard = `-- name: GetCard :one
SELECT id, account_id, amount, created_at, updated_at, deleted_at FROM cards 
WHERE account_id = $1 AND id = $2
LIMIT 1
`

type GetCardParams struct {
	AccountID int32 `json:"account_id"`
	ID        int32 `json:"id"`
}

func (q *Queries) GetCard(ctx context.Context, arg GetCardParams) (Card, error) {
	row := q.db.QueryRowContext(ctx, getCard, arg.AccountID, arg.ID)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCards = `-- name: GetCards :many
SELECT id, account_id, amount, created_at, updated_at, deleted_at FROM cards 
WHERE account_id = $1
`

func (q *Queries) GetCards(ctx context.Context, accountID int32) ([]Card, error) {
	rows, err := q.db.QueryContext(ctx, getCards, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Card{}
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
