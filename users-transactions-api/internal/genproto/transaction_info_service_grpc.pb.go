// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: transaction_info_service.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionInfoServiceClient is the client API for TransactionInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionInfoServiceClient interface {
	SearchTransactionInfo(ctx context.Context, in *SearchTransactionInfoRequest, opts ...grpc.CallOption) (TransactionInfoService_SearchTransactionInfoClient, error)
}

type transactionInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionInfoServiceClient(cc grpc.ClientConnInterface) TransactionInfoServiceClient {
	return &transactionInfoServiceClient{cc}
}

func (c *transactionInfoServiceClient) SearchTransactionInfo(ctx context.Context, in *SearchTransactionInfoRequest, opts ...grpc.CallOption) (TransactionInfoService_SearchTransactionInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransactionInfoService_ServiceDesc.Streams[0], "/TransactionInfoService/SearchTransactionInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionInfoServiceSearchTransactionInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionInfoService_SearchTransactionInfoClient interface {
	Recv() (*SearchTransactionInfoResponse, error)
	grpc.ClientStream
}

type transactionInfoServiceSearchTransactionInfoClient struct {
	grpc.ClientStream
}

func (x *transactionInfoServiceSearchTransactionInfoClient) Recv() (*SearchTransactionInfoResponse, error) {
	m := new(SearchTransactionInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransactionInfoServiceServer is the server API for TransactionInfoService service.
// All implementations should embed UnimplementedTransactionInfoServiceServer
// for forward compatibility
type TransactionInfoServiceServer interface {
	SearchTransactionInfo(*SearchTransactionInfoRequest, TransactionInfoService_SearchTransactionInfoServer) error
}

// UnimplementedTransactionInfoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTransactionInfoServiceServer struct {
}

func (UnimplementedTransactionInfoServiceServer) SearchTransactionInfo(*SearchTransactionInfoRequest, TransactionInfoService_SearchTransactionInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchTransactionInfo not implemented")
}

// UnsafeTransactionInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionInfoServiceServer will
// result in compilation errors.
type UnsafeTransactionInfoServiceServer interface {
	mustEmbedUnimplementedTransactionInfoServiceServer()
}

func RegisterTransactionInfoServiceServer(s grpc.ServiceRegistrar, srv TransactionInfoServiceServer) {
	s.RegisterService(&TransactionInfoService_ServiceDesc, srv)
}

func _TransactionInfoService_SearchTransactionInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchTransactionInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionInfoServiceServer).SearchTransactionInfo(m, &transactionInfoServiceSearchTransactionInfoServer{stream})
}

type TransactionInfoService_SearchTransactionInfoServer interface {
	Send(*SearchTransactionInfoResponse) error
	grpc.ServerStream
}

type transactionInfoServiceSearchTransactionInfoServer struct {
	grpc.ServerStream
}

func (x *transactionInfoServiceSearchTransactionInfoServer) Send(m *SearchTransactionInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TransactionInfoService_ServiceDesc is the grpc.ServiceDesc for TransactionInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TransactionInfoService",
	HandlerType: (*TransactionInfoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchTransactionInfo",
			Handler:       _TransactionInfoService_SearchTransactionInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transaction_info_service.proto",
}
